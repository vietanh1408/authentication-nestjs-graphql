# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Users {
  id: ID!
  createdBy: String
  updatedBy: String
  username: String
  age: Float
  password: String
  email: String
}

type UserDTO {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
  username: String!
  age: Int!
  password: String!
  email: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type UserDTODeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
  username: String
  age: Int
  password: String
  email: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type UserDTOConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [UserDTO!]!
}

type UserDTOAggregateGroupBy {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
}

type UserDTOCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
  createdBy: Int
  updatedBy: Int
}

type UserDTOMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
}

type UserDTOMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
}

type UserDTOAggregateResponse {
  groupBy: UserDTOAggregateGroupBy
  count: UserDTOCountAggregate
  min: UserDTOMinAggregate
  max: UserDTOMaxAggregate
}

type AuthDTO {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
  username: String!
  email: String!
  password: String!
}

type AuthResultDTO {
  access_token: String
  user: Users
}

type AuthDTODeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
  username: String
  email: String
  password: String
}

type AuthDTOConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [AuthDTO!]!
}

type AuthDTOAggregateGroupBy {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
}

type AuthDTOCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
  createdBy: Int
  updatedBy: Int
}

type AuthDTOMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
}

type AuthDTOMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
}

type AuthDTOAggregateResponse {
  groupBy: AuthDTOAggregateGroupBy
  count: AuthDTOCountAggregate
  min: AuthDTOMinAggregate
  max: AuthDTOMaxAggregate
}

type Query {
  users: [UserDTO!]!
  user(id: String!): UserDTO!
  userDTOAggregate(
    """Filter to find records to aggregate on"""
    filter: UserDTOAggregateFilter
  ): [UserDTOAggregateResponse!]!
  userDTO(
    """The id of the record to find."""
    id: ID!
  ): UserDTO
  userDTOS(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: UserDTOFilter = {}

    """Specify to sort results."""
    sorting: [UserDTOSort!] = []
  ): UserDTOConnection!
  authDTOAggregate(
    """Filter to find records to aggregate on"""
    filter: AuthDTOAggregateFilter
  ): [AuthDTOAggregateResponse!]!
  authDTO(
    """The id of the record to find."""
    id: ID!
  ): AuthDTO
  authDTOS(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: AuthDTOFilter = {}

    """Specify to sort results."""
    sorting: [AuthDTOSort!] = []
  ): AuthDTOConnection!
}

input UserDTOAggregateFilter {
  and: [UserDTOAggregateFilter!]
  or: [UserDTOAggregateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input UserDTOFilter {
  and: [UserDTOFilter!]
  or: [UserDTOFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
}

input UserDTOSort {
  field: UserDTOSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserDTOSortFields {
  id
  createdAt
  updatedAt
  deletedAt
  createdBy
  updatedBy
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input AuthDTOAggregateFilter {
  and: [AuthDTOAggregateFilter!]
  or: [AuthDTOAggregateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
}

input AuthDTOFilter {
  and: [AuthDTOFilter!]
  or: [AuthDTOFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
}

input AuthDTOSort {
  field: AuthDTOSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AuthDTOSortFields {
  id
  createdAt
  updatedAt
  deletedAt
  createdBy
  updatedBy
}

type Mutation {
  create(input: CreateUser!): UserDTO!
  createOneUserDTO(input: CreateOneUserDTOInput!): UserDTO!
  createManyUserDTOS(input: CreateManyUserDTOSInput!): [UserDTO!]!
  updateOneUserDTO(input: UpdateOneUserDTOInput!): UserDTO!
  updateManyUserDTOS(input: UpdateManyUserDTOSInput!): UpdateManyResponse!
  deleteOneUserDTO(input: DeleteOneUserDTOInput!): UserDTODeleteResponse!
  deleteManyUserDTOS(input: DeleteManyUserDTOSInput!): DeleteManyResponse!
  register(input: AuthRegisterArgs!): AuthResultDTO!
  login(input: AuthLoginArgs!): AuthResultDTO!
  createOneAuthDTO(input: CreateOneAuthDTOInput!): AuthDTO!
  createManyAuthDTOS(input: CreateManyAuthDTOSInput!): [AuthDTO!]!
  updateOneAuthDTO(input: UpdateOneAuthDTOInput!): AuthDTO!
  updateManyAuthDTOS(input: UpdateManyAuthDTOSInput!): UpdateManyResponse!
  deleteOneAuthDTO(input: DeleteOneAuthDTOInput!): AuthDTODeleteResponse!
  deleteManyAuthDTOS(input: DeleteManyAuthDTOSInput!): DeleteManyResponse!
}

input CreateUser {
  username: String
  email: String
  password: String
  age: Float
}

input CreateOneUserDTOInput {
  """The record to create"""
  userDTO: CreateUserDTO!
}

input CreateUserDTO {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
  username: String
  age: Int
  password: String
  email: String
}

input CreateManyUserDTOSInput {
  """Array of records to create"""
  userDTOS: [CreateUserDTO!]!
}

input UpdateOneUserDTOInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserDTO!
}

input UpdateUserDTO {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
  username: String
  age: Int
  password: String
  email: String
}

input UpdateManyUserDTOSInput {
  """Filter used to find fields to update"""
  filter: UserDTOUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserDTO!
}

input UserDTOUpdateFilter {
  and: [UserDTOUpdateFilter!]
  or: [UserDTOUpdateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
}

input DeleteOneUserDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyUserDTOSInput {
  """Filter to find records to delete"""
  filter: UserDTODeleteFilter!
}

input UserDTODeleteFilter {
  and: [UserDTODeleteFilter!]
  or: [UserDTODeleteFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
}

input AuthRegisterArgs {
  username: String!
  email: String!
  password: String!
  age: Int
}

input AuthLoginArgs {
  username: String
  password: String!
}

input CreateOneAuthDTOInput {
  """The record to create"""
  authDTO: CreateAuthDTO!
}

input CreateAuthDTO {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
  username: String
  email: String
  password: String
}

input CreateManyAuthDTOSInput {
  """Array of records to create"""
  authDTOS: [CreateAuthDTO!]!
}

input UpdateOneAuthDTOInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAuthDTO!
}

input UpdateAuthDTO {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: String
  updatedBy: String
  username: String
  email: String
  password: String
}

input UpdateManyAuthDTOSInput {
  """Filter used to find fields to update"""
  filter: AuthDTOUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAuthDTO!
}

input AuthDTOUpdateFilter {
  and: [AuthDTOUpdateFilter!]
  or: [AuthDTOUpdateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
}

input DeleteOneAuthDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyAuthDTOSInput {
  """Filter to find records to delete"""
  filter: AuthDTODeleteFilter!
}

input AuthDTODeleteFilter {
  and: [AuthDTODeleteFilter!]
  or: [AuthDTODeleteFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
}
